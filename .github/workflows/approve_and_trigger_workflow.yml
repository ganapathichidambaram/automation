name: Approve and Trigger Product Workflow

permissions:
  issues: write
  actions: write
  contents: write

on:
  issue_comment:
    types: [created]

jobs:
  check_approval_and_trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Check if Comment is Approval
        if: startsWith(github.event.comment.body, '/approve')
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const issue = context.payload.issue;
            const comment = context.payload.comment;
            const commenterLogin = comment.user.login;
            const allowedManagers = {
              'int': ['ganapathichidambaram', 'managerA2'],
              'e2em': ['ganapathichidambaram', 'managerB2'],
              'ProductC': ['ganapathichidambaram', 'managerC2']
            };

            const issueBody = issue.body;
            console.log("Issue Body:", issueBody);

            // --- Parse Issue Body to Extract Data ---
            const productMatch = issueBody.match(/###\s*Product\s*\n([^\n]+)/);
            const environmentMatch = issueBody.match(/###\s*Environment\s*\n([^\n]+)/);
            const startDateMatch = issueBody.match(/###\s*Start Date & Time \(YYYY-MM-DD HH:mm\)\s*\n([^\n]+)/);
            const endDateMatch = issueBody.match(/###\s*End Date & Time \(YYYY-MM-DD HH:mm\)\s*\n([^\n]+)/);

            let products = productMatch ? productMatch[1].split(',').map(p => p.trim()) : [];
            let environment = environmentMatch ? environmentMatch[1].trim() : null;
            let startDate = startDateMatch ? startDateMatch[1].trim() : null;
            let endDate = endDateMatch ? endDateMatch[1].trim() : null;

            if (!products.length || !environment || !startDate || !endDate) {
              console.error("Could not extract Product, Environment, Start Date, or End Date from issue body.");
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: "Error: Could not automatically extract Product, Environment, Start Date, or End Date from the issue. Please ensure the issue template was used correctly."
              });
              return;
            }

            // Check if the commenter is an allowed manager for all products
            for (const product of products) {
              if (!allowedManagers[product] || !allowedManagers[product].includes(commenterLogin)) {
                console.log(`Comment by ${commenterLogin} is not from an authorized manager for product ${product}. Exiting.`);
                return;
              }
            }

            // Convert IST to UTC
            const convertISTtoUTC = (dateString) => {
              const date = new Date(dateString);
              return new Date(date.getTime() - (5.5 * 60 * 60 * 1000));
            };

            const startDateTime = convertISTtoUTC(startDate);
            const endDateTime = convertISTtoUTC(endDate);

            // Calculate cron expressions from start and end dates
            const startCronExpression = `${startDateTime.getUTCMinutes()} ${startDateTime.getUTCHours()} ${startDateTime.getUTCDate()} ${startDateTime.getUTCMonth() + 1} *`;
            const endCronExpression = `${endDateTime.getUTCMinutes()} ${endDateTime.getUTCHours()} ${endDateTime.getUTCDate()} ${endDateTime.getUTCMonth() + 1} *`;

            const fs = require('fs');
            const path = require('path');

            let filesToUpdate = [];

            for (const product of products) {
              // Update the start workflow file with the new schedule
              const startWorkflowFilePath = path.join(process.env.GITHUB_WORKSPACE, '.github', 'workflows', `start-${product.toLowerCase().trim()}-env.yml`);

              if (!fs.existsSync(startWorkflowFilePath)) {
                console.error(`Start workflow file does not exist: ${startWorkflowFilePath}`);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `Error: Start workflow file for product **${product}** does not exist. Please check the workflow configuration.
                  CRON: ${startCronExpression}`
                });
                return;
              }

              let startWorkflowContent = fs.readFileSync(startWorkflowFilePath, 'utf8');
              if (startWorkflowContent.includes('schedule:')) {
                startWorkflowContent = startWorkflowContent.replace(/schedule:\n\s+- cron: '.*'/, `schedule:\n  - cron: '${startCronExpression}'`);
              } else if (startWorkflowContent.includes('on:')) {
                startWorkflowContent = startWorkflowContent.replace(/on:/, `on:\n  schedule:\n    - cron: '${startCronExpression}'`);
              } else {
                startWorkflowContent = `on:\n  schedule:\n    - cron: '${startCronExpression}'\n` + startWorkflowContent;
              }
              fs.writeFileSync(startWorkflowFilePath, startWorkflowContent);
              filesToUpdate.push({
                path: `.github/workflows/start-${product.toLowerCase().trim()}-env.yml`,
                content: startWorkflowContent
              });

              // Update the stop workflow file with the new schedule
              const stopWorkflowFilePath = path.join(process.env.GITHUB_WORKSPACE, '.github', 'workflows', `stop-${product.toLowerCase().trim()}-env.yml`);

              if (!fs.existsSync(stopWorkflowFilePath)) {
                console.error(`Stop workflow file does not exist: ${stopWorkflowFilePath}`);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `Error: Stop workflow file for product **${product}** does not exist. Please check the workflow configuration.
                  CRON: ${endCronExpression}`
                });
                return;
              }

              let stopWorkflowContent = fs.readFileSync(stopWorkflowFilePath, 'utf8');
              if (stopWorkflowContent.includes('schedule:')) {
                stopWorkflowContent = stopWorkflowContent.replace(/schedule:\n\s+- cron: '.*'/, `schedule:\n  - cron: '${endCronExpression}'`);
              } else if (stopWorkflowContent.includes('on:')) {
                stopWorkflowContent = stopWorkflowContent.replace(/on:/, `on:\n  schedule:\n    - cron: '${endCronExpression}'`);
              } else {
                stopWorkflowContent = `on:\n  schedule:\n    - cron: '${endCronExpression}'\n` + stopWorkflowContent;
              }
              fs.writeFileSync(stopWorkflowFilePath, stopWorkflowContent);
              filesToUpdate.push({
                path: `.github/workflows/stop-${product.toLowerCase().trim()}-env.yml`,
                content: stopWorkflowContent
              });
            }

            // Commit the changes in a single commit
            const commitMessage = `Update schedule for product workflows`;
            const baseTree = (await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/main'
            })).data.object.sha;

            const tree = await github.rest.git.createTree({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base_tree: baseTree,
              tree: filesToUpdate.map(file => ({
                path: file.path,
                mode: '100644',
                type: 'blob',
                content: file.content
              }))
            });

            const newCommit = await github.rest.git.createCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              message: commitMessage,
              tree: tree.data.sha,
              parents: [baseTree]
            });

            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/main',
              sha: newCommit.data.sha
            });

            // Update the issue with the approval details
            let approvalDetails = '| Product | Approved By |\n| --- | --- |\n';
            for (const product of products) {
              approvalDetails += `| ${product} | ${commenterLogin} |\n`;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `Workflow for product(s) **${products.join(', ')}** in environment **${environment}** scheduled successfully. Dates: Start: **${startDate}**, End: **${endDate}**.\n\n### Approval Details\n${approvalDetails}`
            });

