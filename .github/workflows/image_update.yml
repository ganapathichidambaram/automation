name: Image Update Workflow

permissions:
  issues: write
  actions: write
  contents: write
  pull-requests: write

on:
  issue_comment:
    types: [created]

jobs:
  image_update:
    if: contains(github.event.issue.labels.*.name, 'image-update')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
      - name: Check if Comment is Approval
        if: startsWith(github.event.comment.body, '/approve')
        id: image_retrieval
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const issue = context.payload.issue;

            const issueBody = issue.body;
            const imageList = issueBody
            .split('\n')  // Split body into lines
            .map(line => line.trim())  // Trim whitespace
            .filter(line => line.length > 0 && /^[a-zA-Z0-9_\-\/]+:[a-zA-Z0-9_\-\.]+$/.test(line));  // Match 'name:tag' format

            return imageList.join(',');

      - name: Process Docker Images
        id: process_images
        run: |
          # Get the image list from the previous step's output
          IMAGE_LIST=${{ steps.image_retrieval.outputs.result }}

          # Initialize success and failure arrays
          SUCCESS_IMAGES="[]"
          FAILURE_IMAGES="[]"

          for imageTag in $(echo $IMAGE_LIST | tr ',' '\n'); do
            echo "Checking image: $imageTag"

            # Run skopeo to check if the image exists in the registry and fetch the digest
            result=$(skopeo inspect --format '{{.Digest}}' docker://docker.io/$imageTag 2>&1 || true )

            if [[ $result =~ ^sha256: ]]; then
              # If the image exists, add to success JSON array
              SUCCESS_IMAGES=$(echo $SUCCESS_IMAGES | jq ". + [{\"image\": \"$imageTag\", \"sha\": \"$result\"}]")
            else
              # If the image doesn't exist, add to failure JSON array
              FAILURE_IMAGES=$(echo $FAILURE_IMAGES | jq ". + [{\"image\": \"$imageTag\", \"error\": \"true\"}]")
            fi
          done

          # Set the success and failure JSONs as output variables
          echo "success_images=$(echo $SUCCESS_IMAGES)" >> $GITHUB_OUTPUT
          echo "failure_images=$(echo $FAILURE_IMAGES)" >> $GITHUB_OUTPUT

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Run Go Program
        id: update_yamls
        run: |
          # Write the raw JSON to a file first
          SUCCESS_IMAGES=$(echo '${{ steps.process_images.outputs.success_images }}' | jq -c '.')
          echo "$SUCCESS_IMAGES" > success_images.json

          # Run the Go program with the formatted JSON file
          go run main.go update \
            --structure structure.yaml \
            --input "$(cat success_images.json)"

          rm -f success_images.json

      - name: Create Branch and Commit Changes
        run: |
          current_date=$(date +%Y%m%d_%H%M%S)
          branch_name="image-update-${current_date}"

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git checkout -b $branch_name
          git add .
          git commit -m "Update image versions $(date +%Y-%m-%d)"
          git push origin $branch_name

          echo "branch_name=$branch_name" >> $GITHUB_ENV

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ steps.generate_token.outputs.token }}
          branch: ${{ env.branch_name }}
          title: "Update image versions $(date +%Y-%m-%d)"
          body: |
            Automated PR to update image versions in YAML files

            Updated images:
            ```json
            ${{ steps.process_images.outputs.success_images }}
            ```
          base: main
          labels: |
            automated-pr
            image-update

      - name: Further Process JSON Results
        run: |
          # Retrieve the success and failure results from the previous step
          SUCCESS_IMAGES="${{ steps.process_images.outputs.success_images }}"
          FAILURE_IMAGES="${{ steps.process_images.outputs.failure_images }}"

          echo "Success Images: $SUCCESS_IMAGES"
          echo "Failure Images: $FAILURE_IMAGES"
