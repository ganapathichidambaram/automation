name: Image Update Workflow

permissions:
  issues: write
  actions: write
  contents: write

on:
  issue_comment:
    types: [created]

jobs:
  image_update:
    if: contains(github.event.issue.labels.*.name, 'image-update')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
      # - name: Install skopeo
      #   id: install_skopeo
      #   run: |
      #     # Install skopeo and jq if not installed
      #     sudo apt-get update
      #     sudo apt-get install -y skopeo jq
      - name: Check if Comment is Approval
        if: startsWith(github.event.comment.body, '/approve')
        id: image_retrieval
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const issue = context.payload.issue;

            const issueBody = issue.body;
            const imageList = issueBody
            .split('\n')  // Split body into lines
            .map(line => line.trim())  // Trim whitespace
            .filter(line => line.length > 0 && /^[a-zA-Z0-9_\-\/]+:[a-zA-Z0-9_\-\.]+$/.test(line));  // Match 'name:tag' format


            // Log the image list to check it
            console.log("Image List:", imageList);
            return imageList.join(',');

      - name: Process Docker Images
        run: |
          # Get the image list from the previous step's output
          IMAGE_LIST=${{ steps.image_retrieval.outputs.result }}
          for imageTag in $(echo $IMAGE_LIST | tr ',' '\n'); do
            echo "Checking image: $imageTag"
            # Run skopeo to check if the image exists in the registry
            result=$(skopeo inspect docker://docker.io/$imageTag)
            if [[ $? -eq 0 ]]; then
              echo "SHA ID for $imageTag: $result"
            else
              echo "Image $imageTag does not exist."
            fi
          done
